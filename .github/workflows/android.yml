name: "android test run"

on:
  workflow_dispatch:
    inputs:
      device:
        description: Device
        required: true
        type: choice
        options:
          - Pixel 2
      platform:
        description: Platform
        required: true
        type: choice
        options:
          - VanillaIceCream
      branch:
        description: Branch
        required: false
        type: string
        default: ""

jobs:
  run-tests:
    env:
        TEST_PATH: src/AfAapp.Autotests
        BINARY_PATH: src/AfAapp.Autotests
        APPIUM_VERSION: 2.11.2
        UIAUTOMATOR_VERSION: 3.7.4
        ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 1000
        SYSTEM: system-images;android-26;google_apis;x86
        PLATFORM: platforms;android-26
    runs-on: ubuntu-latest-large
    timeout-minutes: 15
    steps:
      # - name: Install appium
      #   run: |
      #     npm i -g appium@${{ env.APPIUM_VERSION }}
      #     appium -v

      # - name: Install uiautomator2 driver
      #   run: |
      #     appium driver install uiautomator2@latest
      #     appium driver list --installed

      # - name: Checkout code
      #   uses: actions/checkout@v3
      #   with:
      #     ref: ${{ inputs.branch != '' && inputs.branch || 'aqa-add-gha-workflows' }}
      # - name: list folders and files
      #   run: tree $ANDROID_HOME
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Verify Java version
        run: |
          java -version
          echo "JAVA_HOME is set to $JAVA_HOME"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: 'emulator'

      - name: Download platform tools
        run:  sdkmanager  tools platform-tools

      - name: Download emulator image 
        run: yes | sdkmanager "${{ env.SYSTEM }}"

      - name: Download emulator image 
        run: yes | sdkmanager --install "${{ env.SYSTEM }}"

      - name: Download platforms
        run: yes | sdkmanager --install "${{ env.PLATFORM }}"

      # - name: Download the Latest Command-Line Tools
      #   run:  wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O commandlinetools.zip

      # - name: Create a Directory for the Android SDK
      #   run:  mkdir -p $HOME/Android/Sdk/

      # - name: Unzip the Downloaded Command-Line Tools
      #   run:  unzip commandlinetools.zip -d $HOME/Android/Sdk/
      
      # - name: Rename the Unzipped Folder
      #   run:  sudo mv /usr/local/lib/android/sdk/cmdline-tools /usr/local/lib/android/sdk/cmdline-tools/latest

      # - name: Update bash profile with Android SDK tools
      #   run: |
      #     echo 'export ANDROID_HOME=$HOME/Android/Sdk' >> ~/.bash_profile
      #     echo 'export PATH=$ANDROID_HOME/cmdline-tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH' >> ~/.bash_profile
      #     source ~/.bash_profile
      #     echo $PATH

      
      # - name: List files
      #   run:  sudo apt install tree
      # - name: List files
      #   run:  yes | sudo apt install libvulkan1
      # - name: List files
      #   run:  sudo tree $ANDROID_HOME

      # - name: Download android sdk
      #   run:  yes | sudo apt install sdkmanager
      # - name: List sdk packages
      #   run:  /home/runner/Android/Sdk/cmdline-tools/bin/sdkmanager --version
      # - name: List sdk packages
      #   run:  sdkmanager --version

      # - name: Download emulator sdk
      #   run:  sdkmanager "emulator"

      # - name: Download platform tools
      #   run:  sdkmanager "platform-tools"
      
      # - name: Download platform tools
      #   run:  sdkmanager "platforms"

      # - name: Download libpulse
      #   run:  sudo apt-get install libpulse0

      # - name: List images
      #   run: sdkmanager --list

      - name: Check adb state (debug)
        run: adb devices

      - name: Start adb server
        run: adb start-server

      # - name: Install kvm
      #   run: yes | sudo apt install qemu-kvm

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Create simulator
        run: avdmanager create avd -n Pixel_6_API_VanillaIceCream -k "${{ env.SYSTEM }}" --device "pixel_6"


      - name: List simulators
        run: /home/runner/.android/sdk/emulator/emulator -list-avds
      
      - name: Start emulator
        run: /home/runner/.android/sdk/emulator/emulator -avd Pixel_6_API_VanillaIceCream -no-snapshot -no-boot-anim -noaudio -no-window -gpu auto -no-accel -verbose

      - name: Check adb state (debug)
        run: adb devices

      # - name: Create device emulator
      #   run: |
      #     UUID=$(xcrun simctl list devices | grep -A 100 "${{ github.event.inputs.platform }}" | grep -m1 "${{ github.event.inputs.device }}" | grep -Eo '[A-F0-9-]{36}')
      #     echo "UUID=$UUID" >> $GITHUB_ENV
      #     echo $UUID

      # - name: Define device uuid
      #   run: |
      #     UUID=$(xcrun simctl list devices | grep -A 100 "${{ github.event.inputs.platform }}" | grep -m1 "${{ github.event.inputs.device }}" | grep -Eo '[A-F0-9-]{36}')
      #     echo "UUID=$UUID" >> $GITHUB_ENV
      #     echo $UUID

      # - name: Restore dependencies
      #   working-directory: ${{ env.TEST_PATH }}
      #   run: dotnet restore

      # - name: Download Android app binary
      #   run: |
      #     azcopy copy "https://afmobile.blob.core.windows.net/test-automation/iOS?${{ secrets.SAS_TOKEN }}" "${{ env.BINARY_PATH }}" --recursive

      # - uses: Azure/login@v2
      #   with:
      #     creds: >-
      #       ${{ 
      #         secrets.AZURE_SEBPRODUCTS_JSONCREDENTIALS_SEBSTAGEDEMO
      #       }}

      # - name: Run simple test
      #   id: test
      #   working-directory: ${{ env.TEST_PATH }}
      #   run: |
      #     dotnet test -c Prod-Ios --filter FullyQualifiedName=AfAapp.Autotests.Tests.StartScreenTests.Test1

      # - name: Print appium logs
      #   if: always()
      #   run: |
      #     cat logfile.log
